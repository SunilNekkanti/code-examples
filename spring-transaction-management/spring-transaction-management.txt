Spring Hibernate CRUD Transaction Example - Java Configuration Style

This article will mainly focus on how to configure Spring 4 & hibernate 5 through Java Configuration.
Along with that it also has details about how to apply transactions.

Spring 4.3.6.RELEASE
Hibernate 5.2.6.Final
H2 Database 1.4.193

Spring Transaction Management

1. Local & Global Transaction.
2. Global transactions are achieved through JTA and hence application server environment.
3. Local transactions are resource specific like JDBC connection.Local transactions cannot be used within JTA.
4. Declarative & Programmatic are two ways spring proposed. Out of which Declarative is preferred one.Spring provides consistent model in any environment.
5. With spring you can easily port your application of local transactions on JTA.
6. Declarative transaction in spring achieves through AOP proxies. You can set rollback rules where you can define for list of exceptions rollback should triggered.
7. For rollback, you simply need to throw an Exception or its sub type from the code under transaction context.
8. Transaction advice settings.
	a. Propagation Settings: REQUIRED.
	b. Isolation Level: Default
	c. Transaction: Read/Write
	d. Transaction Timout: Default timeout of underline sys.
	e. Any RuntimeException triggers Rollback & any checked exception DOES NOT.
9. @Transactional annotation before an interface definition, a method on an interface, a class definition, or a public method on a class.
10. @Transaction annotation properties
	a. value - PlatformTransactionManager name
	b. propagation - enum (Propagation.REQUIRES_NEW, Propagation.REQUIRED, Propagation.NESTED)	
	c. isolation - enum isolation level(ISOLATION_DEFAULT)
	d. readonly - true/false	
	e. timeout - seconds
	f. rollbackFor - Array of exception class objects for which rollback should happen.
	g. rollbackForClassName - Array of exception class names for which rollback should happen.	
	h. noRollbackFor - Array of exception class objects for which rollback should NOT happen.
	i. noRollbackForClassName - Array of exception class names for which rollback should NOT happen.	
11. Transaction Propagation
	a. PROPAGATION_REQUIRED - nested methods continues with same transactional scope.
	b. Propagation.REQUIRES_NEW - nested methods creates new transaction scope so new physical connection is established.
	c. Propagation.NESTED - Only single physical transaction is maintained with multiple SAVEPOINT options. so even if transaction is rollback at certain point it's scope continues further.
12. Programmatic transaction is achieved through TransactionTemplate & PlatformTransactionManager.
13. Programmatic transaction management is usually a good idea only if you have a small number of transactional operations.
14. 



Basic structure of project will look like this:



Maven POM

POM.xml file has all the necessory dependencies required for running CRUD operation.

Create H2 Table
<Script>

H2 Console.
You can download H2 database from HERE. Just double click on downloaded jar & below screen will be seen in your default browser.
 

Application.properties

 
In this file, we will add some basic database connection properties & some hibernate properties.  
 
Hibernate Entity Classes
<img>

P.S: Currently there is no relation between Employee & Department classes. Department class only exists to explain transaction management.

Java Configuration File
<img>

This is a Java configuration file in which different beans configuration present i.e. SessionFactory.TransactionManager.
It has various annotations like @Configuration,@EnableTransactionManagement,@PropertySource & @ComponentScan
@Configuration -   

Repository & Impl classes
<img>


Service Class
<img>


@Transactional annotation denotes declarative transaction.
saveEmployee(Employee employeeId, Department dept) method explains transactional scope clearly.


Main Class


You will see variety of methods in above classes. While running the program, you can comment out other methods.
In failEmployeeDept(EmployeeService employeeService) method, we will provide correct details of Employee object but incorrect details of Department object. So while executing if Department object could not be persisted then Employee Object should also be failed.
You can see below logs 



Summary
You can download complete project from HERE.
In upcoming article, I'll incorporate Spring MVC & Spring Test framework to make a complete example.
